[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "# Load libraries\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(lubridate)\n\n# Load files\nbikes_tbl      <- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl <- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#> New names:\n\nbikeshops_tbl  <- read_excel(\"../../ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# Get joined table\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  mutate(total.price = price * quantity)\n\n# Split location into city and state\nbike_orderlines_wrangled_tbl$city <- \"\"\nbike_orderlines_wrangled_tbl$state <- \"\"\nfor (i in 1:nrow(bike_orderlines_wrangled_tbl)) {\n  location <- strsplit(bike_orderlines_wrangled_tbl$location[i], \", \")[[1]]\n  bike_orderlines_wrangled_tbl$city[i] <- location[1]\n  bike_orderlines_wrangled_tbl$state[i] <- location[2]\n}\nbike_orderlines_wrangled_tbl <- bike_orderlines_wrangled_tbl[, !colnames(bike_orderlines_wrangled_tbl) %in% \"location\"]\n\n# Plot by state and year\nsales_by_year_state_tbl <- bike_orderlines_wrangled_tbl %>%\n  select(order.date, total.price, state) %>%\n  mutate(year = year(order.date)) %>%\n  \n  group_by(year, state) %>%\n  summarise(sales = sum(total.price)) %>%\n  ungroup() %>%\n  \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'year'. You can override using the `.groups`\n#> argument.\n\nsales_by_year_state_tbl %>%\n  ggplot(aes(x = year, y = sales, fill = state)) +\n\n  geom_col() +\n\n  facet_wrap(~ state) +\n\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and state\",\n    fill = \"State\" # Changes the legend name\n  ) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "library(httr)\nlibrary(jsonlite)\n\n#> \n#> Attaching package: 'jsonlite'\n\n\n#> The following object is masked from 'package:purrr':\n#> \n#>     flatten\n\nurl <- \"https://jsonplaceholder.typicode.com/posts\"\n\nresponse <- GET(url)\n\ncontent <- content(response, \"text\")\n\nposts <- fromJSON(content)\n\nhead(posts, 10)\n\n\n\n  \n\n\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(rvest)\n\nurl_home <- \"https://www.rosebikes.de/fahrräder\"\nhtml_home <- read_html(url_home)\nbike_cats <- html_home %>%\n  html_nodes(css = \".catalog-navigation__link\")\nlinks <- sapply(bike_cats, function(x) {x %>% html_attr(\"href\")})\nlinks <- links[1:9] %>%\n  enframe(name = \"position\", value = \"subdirectory\") %>%\n  mutate(\n    url = glue(\"https://www.rosebikes.de{subdirectory}\"))  %>%\n  distinct(url)\n\nget_data <- function(url) {\n  html_bike_cat <- read_html(url)\n  \n  listings <- html_nodes(html_bike_cat, css = '.catalog-category-bikes__price-title') %>% \n    html_text(trim=TRUE) %>%              \n    str_replace_all(\" \",\"\") %>%\n    str_replace_all(\"ab\", \"\") %>%\n    str_replace_all(\"€\", \"\") %>%\n    str_replace_all(\"\\n\", \"\") %>%\n    str_replace_all(\"\\\\.\", \"\") %>%\n    str_replace_all(\",\", \"\\\\.\") %>%\n    iconv('utf-8', 'ascii', sub='') %>%\n    as.numeric()\n  \n  names <- html_nodes(html_bike_cat, xpath = '//basic-headline/h4') %>% \n    html_text() %>%\n    str_replace_all(\"\\n\", \"\") %>%\n    str_to_title()\n  \n  categories <- rep(url %>% str_replace_all(\"https://www.rosebikes.de/fahrräder/\", \"\"), \n              each=length(names)) %>%\n    str_to_title()\n  \n  return(list(\"listings\" = listings, \"names\" = names, \"categories\" = categories))\n}\n\ndata <- get_data(links$url[1])\nbike_data <- tibble(bike.type = data$categories,\n                    bike.name = data$names,\n                    bike.price = as.numeric(data$listings))\nfor (i in 2:9) {\n  data <- get_data(links$url[i])\n  \n  bike_data <- bike_data %>% add_row(bike.type = data$categories,\n                                     bike.name = data$names,\n                                     bike.price = as.numeric(data$listings))\n}\n\nhead(bike_data, 10)"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(tidyverse)\nlibrary(vroom)\nlibrary(data.table)\n\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\n\npatent_tb1 <- vroom(\n  file       = '../../Patent_data_reduced/patent.tsv', \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Warning: The following named parsers don't match the column names: type, number,\n#> country, abstract, title, kind, filename, withdrawn\n\nassignee_tb1 <- vroom(\n  file       = '../../Patent_data_reduced/assignee.tsv', \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n#> Warning: The following named parsers don't match the column names: number,\n#> country, date, abstract, title, kind, num_claims, filename, withdrawn\n\npatent_assignee_tb1 <- vroom(\n  file       = '../../Patent_data_reduced/patent_assignee.tsv', \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\"))\n\n#> Warning: The following named parsers don't match the column names: id, type,\n#> number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\nuspc_tb1 <- vroom(\n  file       = '../../Patent_data_reduced/uspc.tsv', \n  delim      = \"\\t\", \n  col_types  = col_types,\n  na         = c(\"\", \"NA\", \"NULL\")) %>%\n  transform(patent_id = as.character(patent_id))\n\n#> Warning: The following named parsers don't match the column names: id, type,\n#> number, country, date, abstract, title, kind, num_claims, filename, withdrawn\n\nwrangled <- assignee_tb1 %>%\n  left_join(patent_assignee_tb1, by = c(\"id\" = \"assignee_id\")) %>%\n  left_join(patent_tb1, by = c(\"patent_id\" = \"id\")) %>%\n  left_join(uspc_tb1, by = \"patent_id\")\n\n#> Warning: One or more parsing issues, call `problems()` on your data frame for details,\n#> e.g.:\n#>   dat <- vroom(...)\n#>   problems(dat)\n\n\n#> Warning in left_join(., uspc_tb1, by = \"patent_id\"): Detected an unexpected\n#> many-to-many relationship between `x` and `y`.\n\npatent_leaders <- sort(table(wrangled$organization), decreasing=T)[1:10] %>%\n  as.data.frame() %>%\n  mutate(Var1 = Var1 %>% str_to_title())\n\ndata.table(\n  \"Org\" = patent_leaders$Var1,\n  \"Patents\" = patent_leaders$Freq)\n\n\n\n  \n\n\nwrangled_august <- wrangled %>% \n  select(organization, date) %>%\n  filter(date >= \"2014-08-01\" & date <= \"2014-08-31\")\n\npatent_leaders_august <- sort(table(wrangled_august$organization), decreasing=T)[1:10] %>%\n  as.data.frame() %>%\n  mutate(Var1 = Var1 %>% str_to_title())\n\ndata.table(\n  \"Org\" = patent_leaders_august$Var1,\n  \"Patents\" = patent_leaders_august$Freq)\n\n\n\n  \n\n\nwrangled_class <- wrangled %>%\n  select(organization, mainclass_id) %>%\n  filter(organization %in% patent_leaders$Var1[1:10]) %>% \n  subset(mainclass_id != \"No longer published\")\n\nclass_leaders <- sort(table(wrangled_class$mainclass_id), decreasing=T)[1:5] %>% \n  as.data.frame() %>%\n  mutate(Var1 = Var1 %>% str_to_title())\n\ndata.table(\n  \"Main class\" = class_leaders$Var1,\n  \"Patents\" = class_leaders$Freq)"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(glue)\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 306096 Columns: 67-- Column specification --------------------------------------------------------\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> i Use `spec()` to retrieve the full column specification for this data.\n#> i Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nworldwide_cases <- covid_data_tbl %>%\n  select(continent, date, total_cases) %>%\n  drop_na(continent) %>%\n  group_by(date, continent) %>%\n  summarise(Total = sum(total_cases, na.rm = TRUE))\n\n#> `summarise()` has grouped output by 'date'. You can override using the `.groups`\n#> argument.\n\ndata_max <- worldwide_cases %>% \n  group_by(continent) %>%\n  filter(Total == max(Total))\n\nworldwide_cases %>% ggplot(aes(as.Date(date), Total, color = continent)) +\n  geom_line(linewidth = 1) +\n  theme_linedraw() +\n  scale_x_date(date_labels = \"%B %Y\", \n               date_breaks = \"1 month\", \n               expand = c(0,NA)) +\n  labs(\n    title = \"COVID cases\",\n  ) +\n  xlab(\"Date\") + ylab(\"Cumulative Cases\") +\n  scale_y_continuous(labels = label_number(suffix = \" M\", scale = 1e-6)) +\n  theme(legend.title = element_blank(), \n        legend.position = \"bottom\", \n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\nworld <- map_data(\"world\")\n\nworldwide_mortality <- covid_data_tbl %>%\n  select(location, date, total_deaths, population) %>%\n  drop_na(location) %>%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location )) %>% \n  distinct() %>%\n  group_by(location) %>% \n  filter(date == max(date)) %>%\n  mutate(death_rate = total_deaths / population) %>%\n  rename(region = location) %>%\n  left_join(world, by = \"region\")\n\nworldwide_mortality %>% ggplot(aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = death_rate), color = \"white\") +\n  labs(\n    title = \"Mortality Rate Around the World (deaths / population)\",\n    fill = \"Mortality Rate\"\n  ) +\n  theme(axis.line = element_blank(), axis.text = element_blank(),\n        axis.ticks = element_blank(), axis.title = element_blank())"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]